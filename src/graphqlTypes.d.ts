/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  helloWorld?: string;
  number?: GQLNumber;
}

export interface GQLNumber {
  value?: number;
  next?: GQLNumber;
  prev?: GQLNumber;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Number?: GQLNumberTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  helloWorld?: QueryToHelloWorldResolver<TParent>;
  number?: QueryToNumberResolver<TParent>;
}

export interface QueryToHelloWorldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNumberArgs {
  n: number;
}
export interface QueryToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNumberArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNumberTypeResolver<TParent = any> {
  value?: NumberToValueResolver<TParent>;
  next?: NumberToNextResolver<TParent>;
  prev?: NumberToPrevResolver<TParent>;
}

export interface NumberToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberToNextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberToPrevResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
